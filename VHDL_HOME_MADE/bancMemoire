
type memory is array (0 downto 15) of std_logic_vector(7 downto 0);
signal bench : memory;

process

	begin
		wait until clk'event and clk = '1'

		if( RST = '1')
			bench <= (others => '0');
		else if( RW = '1') -- lecture
			OUT <= bench(conv_integer(unsigned(addr));
		else if( RW = '0') -- ecriture
			bench(conv_integer(unsigned(addr))) <= IN; 
		end if;

end process;

------ TEST ------

  COMPONENT MD
    PORT(
         addr : IN  std_logic_vector(7 downto 0);
         IN : IN  std_logic_vector(7 downto 0);
         RW : IN  std_logic;
         RST : OUT  std_logic;
         clk : OUT  std_logic;
        );
    END COMPONENT;
    

   --Inputs
   signal addr : std_logic_vector(7 downto 0) := (others => '0');
   signal IN : std_logic_vector(7 downto 0) := (others => '0');
   signal RW : std_logic := '0';
   signal clk : std_logic := '0';
   signal RST : std_logic := '0';

 	--Outputs
   signal OUT : std_logic_vector(7 downto 0);
 
    
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: MD PORT MAP (
          addr => addr,
          IN => IN,
          RW => RW,
          RST => RST,
         clk => clk,
	OUT => OUT
        );

	clk<= not ck after 20 ns;
   -- Stimulus process
	RW <= '1' after 100 ns, '0' after 200 ns;
	RST <= '1' after 300 ns;
	addr <= '00000001' after 20 ns;
	IN <= '11111110' after 20 ns;

END;
